归纳总结：
1.Iterator接口功能是从前向后输出，属于单项输出。
2.Iterator的主要功能是完成迭代输出操作。
3.在使用Iterator的时候最好不要删除数据。
4.如果想要使用ListIterator则只能依靠List接口完成。
5.如果要进行有后向前输出，则只能先进行由前向后输出。
6.对于此接口中的增加以及修改操作，用的不是太多，了解即可。
【原文链接】
https://blog.csdn.net/u013087513/article/details/52232731

【集合框架】
囊括所有集合接口、实现和算法。
【泛型】
不需要使用显示转换和instanceOf操作符。
【集合框架基础接口】
Set、List、Map
【Iterator接口】
提供遍历任何Collection的接口。
迭代器允许调用者在迭代过程中移除元素。
当一个集合正在被遍历的时候，它会阻止其他线程去修改集合。
【fail-fast|fail-safe】
fail-fast:迭代器抛出ConcurrentModificationException
fail-safe:迭代器从不抛出ConcurrentModificationException
【hashCode()|equals()】
如果o1.equals(o2)，那么o1.hashCode() == o2.hashCode()总是true
如果o1.hashCode() == o2.hashCode()，并不意味着o1.equals(o2)会为true
【HashMap|TreeMap】
HashMap:插入、删除、定位元素。
TreeMap:对一个有序的key集合进行遍历。
【Queue|Deque|Stack】
Queue:队列允许先进先出(FIFO)检索元素。
Deque:允许从两端检索元素。
Stack:允许对元素进行后进先出(LIFO)进行检索。