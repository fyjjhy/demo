1.字节流没有使用缓冲区，字符流使用了缓冲区
2.所有的文件在硬盘或者在传输过程中都是以字节方式进行的，而字符只有在内存中才会形成
3.字节流主要用于处理二进制数据，字符流主要用于处理文本
4.字节流转化为字符流，实际就是byte[]转换成String，而在字符流转化成字节流，就是String转换成byte[]
5.字节流与字符流的区别(https://blog.csdn.net/lwang_it/article/details/78886186)
整理:
1.字节流是如何读写数据的?
读取:
- int read();
该方法从文件中读取一个byte(8位)，填充到int的低八位，高24位为0，返回值范围正数:0-255，
如果返回-1表示读取到了文件末尾!每次读取后自动移动文件指针，准备下次读取。
- int read(byte[]);
注:一个汉字需要3个字节才可以读取到
该方法从文件中的指针处尝试最多读取给定数组的总长度的字节量，
并从给定的字节数组的第一个位置开始，
将读取到的字节顺序存放至数组中，
返回值为实际读取到的字节量。
写出:
- void write(int d);
该方法会根据当前文件中指针所在位置处写入一个字节，是将参数int的"低八位"写出
- void write(byte[] d)
该方法会根据当前指针所在位置处连续写出给定数组中的所有字节
- void write(byte[] d, int offset, int len)
该方法会根据当前指针所在位置处连续写出给定数组中的部分字节，
这个部分字节是从数组的offset处开始，连续len个字节。
2.字符流是如何读写数据的?
读取:
- int read();
读取一个字符，返回的int值"低16位"有效。
- int read(char[] chs);
从该流中读取一个字符数组的length个字符并存入该数组，返回值为实际读取到的字符量。
写出:
- void write(int c);
写出一个字符，写出给定int值"低16位"表示的字符。
- void write(char[] chs);
将给定数组中所有字符写出。
- void write(String str);
将给定的字符串写出。
- void write(char[] chs, int offset, int len);
将给定数组中的从offset处开始连续的len个字符写出。
问题:
读取文件中的汉字，转换成字节数组中的多个字节，字节数组又是如何将字节转换成汉字的
------------------------------------------------------------------------------------------------------------------------
从TCIS同步数据的步骤:
创建记录文件对象，给记录文件对象的部分字段赋值
处理日期，查询5天之间的数据
准备去TCIS下载数据，封装请求对象，封装响应对象
处理请求URL，发起请求，等待响应
获取响应数据，将响应数据写入文件中
处理下载文件
读取数据并上传至数据库
更新错误数据，将错误数据写入指定文件
保存记录文件
问题:
extends与super的区别
------------------------------------------------------------------------------------------------------------------------
问题:
什么情况下使用Thread、Runnable或者匿名内部类
使用Runnable创建并启动线程:
将线程与线程要执行的任务分离开减少耦合
更好的去实现其他父类或接口，因为接口是多继承关系
使用内部类创建并启动线程:
简化编写代码的复杂度
一个线程仅需要一个实例时

