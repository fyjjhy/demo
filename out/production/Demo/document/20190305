@SuppressWarnings("unchecked")作用
项目中出现红色报错，影响项目运行，无法启动
黄色虽然不会让项目停止，但是却是不规范
用@SuppressWarnings告诉编译器忽略警告。
@SuppressWarnings(value={})
value:取消显示的告警集，允许使用重复的名称，忽略第二个和后面出现的名称。
@SuppressWarnings(unchecked):告诉编译器忽略unchecked警告信息
@SuppressWarnings("serial"):
@SuppressWarnings("deprecation"):消除用@Deprecated注释的方法，经编译器出现的警告信息
@SuppressWarnings(value={"unchecked", "deprecation"})=@SuppressWarnings("unchecked", "deprecation")

jps [-l]:查看本机所有Java进程pid(适用所有)
每个java程序都会独占一个java虚拟机实例
dump记录了线程在jvm中的执行信息，可以看成是线程活动的日志。
线程转储文件
1.VisualVM Profiler
2.jstack
a.找到应用程序的进程ID
ps -ef | grep java
b.输出线程转储信息到文件或控制台
jstack PID > mydumps.tdump
jstack PID
3.kill -3 PID
4.jcmd
a.jcmd PID Thread.print
线程转储是所有线程的列表，每个条目显示关于线程的信息，其中包括按照执行的顺序进行跟踪的信息。
线程转储文件包含以下几个部分:
1.线程名称
2.线程优先级
3.线程ID
4.线程状态，显示当前线程状态，例如:RUNNABLE,WAITING
5.BLOCKED，在分析死锁的同时，查找他们试图获取锁的阻塞线程和资源
5.堆栈信息:在这里如果线程在等待任何锁，我们可以看到线程获得锁的地方
在Linux终端下执行"jvisualvm"命令即可进入VisualVM控制台
-----------------------------------------------------
2019-03-06 16:14:25
dump文件中的线程状态:
1.死锁:Deadlock(重点关注)
2.暂停:Suspended
3.停止:Parked
4.阻塞:Blocked(重点关注)
5.对象等待中:Object.wait()或TIMED_WAITING
6.等待资源:Waiting on condition(重点关注)
7.等待获取监视器:Waiting on monitor entry(重点关注)
8.执行中:Runnable
线程状态是阻塞状态，说明线程等待资源超时
waiting to lock <0x00000000acf4d0c0>:线程在等待给0x00000000acf4d0c0地址上锁
waiting for monitor entry:此线程通过synchronized(obj){...}申请进入临界区，
从而进入"Entry Set"队列，但该obj对应的monitor被其他线程拥有，
所以本线程在Entry Set队列中等待。
parking:线程处于挂起中
