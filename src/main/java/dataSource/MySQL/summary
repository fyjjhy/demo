【主键 primary key】
能够唯一标识表中某一行的属性或属性组。
主键可以保证记录的唯一和主键域非空，数据库管理系统对于主键自动生成唯一索引，所以主键也是一个特殊的索引。
【外键 foreign key】
要删除一张表中的主键必须要确保其他表中没有相同的外键。
【索引 index】
用来快速地寻找那些具有特定值的记录。
主要是为了检索方便，是为了加快访问速度，按一定规则创建的，一般起到排序作用。
[例如]: 如果我们创建了name列的索引，MySQL将在索引中排序name列。
唯一性索引与普通索引的区别：索引列的所有值都只能出现一次，即必须唯一。
[总结]
1.主键一定是唯一性索引，唯一性索引并不一定就是主键。
2.一个表中可以由多个唯一性索引，但只能有一个主键。
3.主键列不允许有空值，而唯一性索引列允许空值。
4.主键可以被其他字段作外键引用，而索引不能作为外键引用。
ALTER TABLE pc ADD CONSTRAINT fk_cpu_model // 1
FOREIGN KEY (cpumodel) // 2
REFERENCES parts(model) // 3
ON UPDATE CASCADE; // 4
第一行是说要为Pc表设置外键，给这个外键起一个名字叫做fk_cpu_model；
第二行是说将本表的cpumodel字段设置为外键；
第三行是说这个外键受到的约束来自于Parts表的model字段；
第四行是说在主表更新时，子表(们)产生连锁更新动作，即"级联"操作。
CASCADE;// 级联操作
RESTRICT;// 禁止主表变更
SET NULL;// 子表相应字段设置为空
所有MySQL索引都以B-树的形式保存。
【索引类型】
[普通索引]
创建索引：CREATE INDEX <索引的名字> ON tablename (列的列表);
修改表：ALTER TABLE tablename ADD INDEX [索引的名字] (列的列表);
创建表的时候指定索引：CREATE TABLE tablename ( [...], INDEX [索引的名字] (列的列表) );
[唯一性索引]
创建索引：CREATE UNIQUE INDEX <索引的名字> ON tablename (列的列表);
修改表：ALTER TABLE tablename ADD UNIQUE [索引的名字] (列的列表);
创建表的时候指定索引：CREATE TABLE tablename ( [...], UNIQUE [索引的名字] (列的列表) );
[主键]
主键一般在创建表的时候指定,每个表只能有一个主键。
修改表：ALTER TABLE tablename ADD PRIMARY KEY(列);
创建表的时候指定索引：CREATE TABLE tablename ( [...], PRIMARY KEY (列) );
[全文索引]
全文索引的索引类型为FULLTEXT。
全文索引可以在VARCHAR或者TEXT类型的列上创建。
创建索引：CREATE INDEX
修改表：ALTER TABLE
创建表的时候指定索引：CREATE TABLE
对于大规模的数据集，通过ALTER TABLE（或者CREATE INDEX）命令
创建全文索引要比把记录插入带有全文索引的空表更快。
[单列索引与多列索引]
单列：
ALTER TABLE people ADD INDEX firstname(firstname);
多列：
ALTER TABLE people ADD INDEX fname_lname_age (firstname, lastname, age);
执行查询的时候，MySQL只能使用一个索引。
【选择索引列】
主要有两种类型的列：
1.在where子句中出现的列。
2.在join子句中出现的列。
在许多场合，人们创建唯一索引的目的往往不是为了提高访问速度，而只是为了避免数据出现重复
【链接】
https://blog.csdn.net/duck_arrow/article/details/8264686

【数据库事务特性】
    ACID:
    原子性：事务包含的所有操作要么全部成功，要么全部失败回滚。
    一致性：一个事务执行之前和执行之后都必须处于一致性状态。
    隔离性：当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。
    事务的隔离性由锁机制实现。
    持久性：一个事务一旦被提交了，那么对数据库中数据的改变就是永久性的。
    原子性、一致性和持久性由事务的redo log(重做日志)和undo log(撤销日志)来保证。
    redo log用来保证事务的持久性。
【事务的目的】
    要么全部执行，要么全部不做。
【redo log|undo log的简化过程】
    假设有A、B两个数据，值分别为1，2
    1.事务开始
    2.记录A=1到undo log
    3.修改A=3
    4.记录A=3到redo log
    5.记录B=2到undo log
    6.修改B=4
    7.记录B=4到redo log
    8.将redo log写入磁盘
    9.事务提交
【数据库事务一致性】
    数据库进行任何写入操作的时候都要先写[日志]的，同样的道理，在执行事务的时候数据库会首先记录下这个事务的redo操作日志，
    然后才开始真正操作数据库，在操作之前，首先会把日志文件写入磁盘，那么当突然断电的时候，即使操作没有完成，
    在重启数据库的时候，数据库会根据当前数据的情况进行undo回滚或者是redo前滚，这样就保证了数据的强一致性。
【数据库隔离级别】
    串行化：可避免脏读、不可重复读、幻读的发生。(所有事务操作一次顺序执行。注意这会导致并发度下降，性能最差。通常会用其他并发级别加上相应的并发锁机制来取代它。)
    最高隔离级别。
    可重复读：可避免脏读、不可重复读的发生。(整个事务过程中，对同一笔数据的读取结果是相同的，不管其他事务是否在对共享数据进行更新，也不管更新提交与否。)
    MySQL的默认级别。
    读已提交：可避免脏读的发生。(一个事务的更新操作结果只有在该事务提交之后，另一个事务才可以读取到同一笔数据更新后的结果。)
    大部分数据库的默认隔离级别是读已提交。
    读未提交：最低级别，任何情况都无法保证。(一个事务可以读取另一个事务并未提交的更新结果。)
【脏读|不可重复读|幻读】
    脏读：发生在一个事务A读取了被另一个事务B修改，但是还未提交的数据。假如B回退，则事务A读取的是无效的数据。
    不可重复读：重点时[修改]，同样的条件，读取过的数据，再次读取发现值不一样了。
        在事务1中，Mary读取了自己的工资为1000，操作并没有完成。
        在事务2中，财务人员修改了Mary的工资为2000，并提交了事务。
        在事务2中，Mary再次读取自己的工资，工资变成了2000。
    幻读：发生在当两个完全相同的查询执行时，第二次查询锁返回的结果集跟第一个查询不相同。
    重点在于新增或者删除(数据条数变化)，同样的条件，第1次和第2次读出来的记录数不一样。
        事务1，读取所有工资为1000的员工，共读取到10条记录。
        事务2，向表中插入一条记录，工资也为1000。
        事务1，再次读取所有工资为1000的员工，共读取到11条记录，这就产生了幻读。
【drop|delete|truncate】
    drop: 直接删除表(结构和数据)
    delete: 删除表中数据
    [删除过程]:每次从表中删除一行，并且同时将该行的删除操作作为事务记录在日志中保存以便进行回滚操作。
    truncate: 删除表中数据，通过释放存储表数据所用的数据页来删除数据，并且只在事务日志中对记录页的释放。
    [truncate table]: 一次性从表中删除所有的数据并不把单独的删除操作记录记入日志保存，删除行是不能恢复的。
【链接地址】
    redo log|undo log: https://www.jianshu.com/p/20e10ed721d0
                       https://cloud.tencent.com/developer/news/261952
    脏读|不可重复读|幻读： https://www.cnblogs.com/balfish/p/8298296.html
